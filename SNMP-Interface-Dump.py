## This Script polls all interface statistics using the OID form the IF-MIB object# It returns the data to the screen#from pysnmp.entity.rfc3413.oneliner import cmdgenimport sysimport stringimport argparse#device = '10.5.6.254'#community = 'poopie'def initArgs():	# initialize variables with command-line arguments	parser = argparse.ArgumentParser(description='\			input -f [file] -i [ip_address] -c [community]'\			)	parser.add_argument('-i', '--ip_address', help='i.e. -i "192.168.31.21"')	parser.add_argument('-c', '--community', help='Enter SNMP Community')	parser.add_argument('-f', '--file', help='Load Host list from File')	arg = parser.parse_args()	if arg.file:		hosts = {}		with open(arg.file, "r") as host_list:			for line in host_list:				(device, community) = string.split(line,':')				if device[0] == "#":					pass				else:					hosts[device] = community.rstrip()	else:		# set ip address to make calls on		if arg.ip_address:			device = arg.ip_address		else:			sys.exit("You should specify a Host")			#device = '10.5.6.254'		if arg.ip_address:			community = arg.community		else:			sys.exit("You should specify a community")			#community = 'poopie'				hosts = { device : community }		return hostsdef snmpwalkoid(device, community, oids):# This function queries the device for a given ip, community and OID. It will talk the OID tree.		snmpdata = {}		cmdGen = cmdgen.CommandGenerator()		errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.nextCmd(		# securityIndex is a dumby value does nothing		cmdgen.CommunityData('securityIndex', community, mpModel=1),		cmdgen.UdpTransportTarget((device, 161)),		oids	)		if errorIndication:		print(errorIndication)	else:				if errorStatus:			print('%s at %s' % (				errorStatus.prettyPrint(),				errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'				)			)		else:			return varBindTable# This function retrieves the available interface datadef populateifdata(device, community, indextable):	oids = '1.3.6.1.2.1.2.2.1'		print "Capturing Interface Data..."						walkreturn = snmpwalkoid(device, community, oids)			for currentrow in walkreturn:		for indexoid, val in currentrow:			#print indexoid			replaced = string.replace(indexoid.prettyPrint(), oids, '')[1::]			value = val.prettyPrint()					(oidnumber, ifindex) = string.split(replaced,'.')			ifindex = int(ifindex)			oidnumber = int(oidnumber)			#print('%s : %s = %s' % (ifindex, oidnumber, value))					indextable[ifindex][oidnumber] = value											return indextable# This function populates a dictionary with all of the available Interface Index Valuesdef createifindexlist(device, community):	print "Creating List of ifIndexs..."	oids = '1.3.6.1.2.1.2.2.1.1'		indextable = {}		walkreturn = snmpwalkoid(device, community, oids)			for currentrow in walkreturn:		for oid, val in currentrow:			ifindex = val			indextable[ifindex] = {}	return indextabledef printinterfacestats(interfacedata):	row = True	ignoreoids = [22, 21, 18, 12]		ifmib = {			1:"ifIndex",			2:"ifDescr",			3:"ifType",			4:"ifMtu",			5:"ifSpeed",			6:"ifPhysAddress",			7:"ifAdminStatus",			8:"ifOperStatus",			9:"ifLastChange",			10:"ifInOctets",			11:"ifUcastPkts",			12:"ifInNUcastPkts",			13:"ifInDiscards",			14:"ifInErrors",			15:"ifInUnknownProtos",			16:"ifOutOctets",			17:"ifOutUcastPkts",			18:"ifOutNUcastPkts",			19:"ifOutDiscards",			20:"ifOutErrors",			21:"ifOutQLen",			22:"ifSpecific"	}		# oid value of 8 or 7	ifstatus = {			1: "up",			2: "down",			3: "testing",			4: "unknown",			5: "dormant",			6: "notPresent",			7: "lowerLayerDown"	}	if row == True:		print "|",		for id in sorted(ifmib):			print "%s | " % ifmib[id],		print "\n",		for ifindex in sorted(interfacedata):		if row != True:			print "\n\nInterface Number", ifindex		else:			print "|",		for oid in sorted(interfacedata[ifindex]):			if row == True:				if oid == 8 or oid == 7:					print ifstatus[int(interfacedata[ifindex][oid])],				else:					print interfacedata[ifindex][oid],									print "|",			else: 					print "%s (%s) =" % (ifmib[oid], oid), 								if oid == 8 or oid == 7:					print ifstatus[int(interfacedata[ifindex][oid])]				else:					print interfacedata[ifindex][oid]		print "\n",if __name__ == "__main__":##### Start Main Section ######	hosts = initArgs()		for i in hosts:		device = str(i)		community = str(hosts[i])				print "Gathering SNMP Data for, %s using the community %s" % (device, community)		list_of_ifindex = createifindexlist(device, community)		interfacedata =  populateifdata(device, community, list_of_ifindex)		printinterfacestats(interfacedata)
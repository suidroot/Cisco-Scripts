## This Script polls all interface statistics using the OID form the IF-MIB object# It returns the data to the screen#from vendors.snmp import querysnmpdataimport sysimport stringimport argparseimport csvdef initArgs():	# initialize variables with command-line arguments	#parser = argparse.ArgumentParser(description='\	#		input -f [file] -i [ip_address] -c [community] -s -a -b'\	#		)	parser = argparse.ArgumentParser()	parser.add_argument('-i', '--ip_address', help='i.e. -i "192.168.31.21"')	parser.add_argument('-c', '--community', help='Enter SNMP Community')	parser.add_argument('-f', '--file', help='Load Host list from File')	parser.add_argument('-s', '--ifcount', help='Summary Interface Inventory', action='store_true')	parser.add_argument('-a', '--detail', help='Detailed Interface Inventory', action='store_true')	parser.add_argument('-b', '--csv', help='CSV Format', action='store_true')	parser.add_argument('-o', '--output', help='Output to file')	arg = parser.parse_args()	# Gather host information from File or Commandline	if arg.file:		hosts = {}		with open(arg.file, "r") as host_list:			for line in host_list:				(device, community) = string.split(line,':')				if device[0] == "#":					pass				else:					hosts[device] = community.rstrip()	else:		# set ip address to make calls on		if arg.ip_address:			device = arg.ip_address		else:			sys.exit("You should specify a Host")			#device = '10.5.6.254'		if arg.ip_address:			community = arg.community		else:			sys.exit("You should specify a community")			#community = 'poopie'				hosts = { device : community }	# Parse other options	if arg.ifcount:		ifcount = True	else: 		ifcount = False			if arg.detail:		detail = True	else:		detail = False		if arg.csv:		format = 'csv'	else:		format = 'text'	if arg.output:		outputfile = arg.output	else:		outputfile = ""			return hosts, ifcount, detail, format, outputfile# This function retrieves the available interface datadef populateifdata(device, community):	oids = '1.3.6.1.2.1.2.2.1'		#print "Capturing Interface Data..."				indextable = {}				walkreturn = querysnmpdata.snmpwalkoid(device, community, oids)			for currentrow in walkreturn:		for indexoid, val in currentrow:			#print indexoid			replaced = string.replace(indexoid.prettyPrint(), oids, '')[1::]			value = val.prettyPrint()					(oidnumber, ifindex) = string.split(replaced,'.')			ifindex = int(ifindex)			oidnumber = int(oidnumber)			#print('%s : %s = %s' % (ifindex, oidnumber, value))					if ifindex in indextable:				indextable[ifindex][oidnumber] = value			else:				indextable[ifindex] = {}				indextable[ifindex][oidnumber] = value													return indextabledef printinterfacestats(interfacedata, format, hostname):		if format == 'csv':		csv = True	else:		csv = False	ignoreoids = [22, 21, 18, 12]		ifmib = {			1:"ifIndex",			2:"ifDescr",			3:"ifType",			4:"ifMtu",			5:"ifSpeed",			6:"ifPhysAddress",			7:"ifAdminStatus",			8:"ifOperStatus",			9:"ifLastChange",			10:"ifInOctets",			11:"ifUcastPkts",			12:"ifInNUcastPkts",			13:"ifInDiscards",			14:"ifInErrors",			15:"ifInUnknownProtos",			16:"ifOutOctets",			17:"ifOutUcastPkts",			18:"ifOutNUcastPkts",			19:"ifOutDiscards",			20:"ifOutErrors",			21:"ifOutQLen",			22:"ifSpecific"	}		# oid value of 8 or 7	ifstatus = {			1: "up",			2: "down",			3: "testing",			4: "unknown",			5: "dormant",			6: "notPresent",			7: "lowerLayerDown"	}	if csv == True:	# Print Header csv		print "hostname",							for id in sorted(ifmib):					for skip in ignoreoids:				if id == skip:					exclude = True					break				else:					exclude = False								if exclude != True:						print ",{0}".format(ifmib[id]),		print "\n",			# Print Detailed interference information	for ifindex in sorted(interfacedata):		if csv != True:			print "\nInterface Number", ifindex		else:			print "{0}".format(hostname),		for oid in sorted(interfacedata[ifindex]):			for skip in ignoreoids:				if oid == skip:					exclude = True					break				else:					exclude = False			if exclude != True:						if csv == True:					if oid == 8 or oid == 7:						print ",{0}".format(ifstatus[int(interfacedata[ifindex][oid])]),					else:						print ",{0}".format(interfacedata[ifindex][oid]),								else: 						print "{0} ({1}) =".format(ifmib[oid], oid), 								if oid == 8 or oid == 7:						print ifstatus[int(interfacedata[ifindex][oid])]					else:						print interfacedata[ifindex][oid]		print "\n",def printinterfacesumary(interfacedata, format, hostname):		numberup = 0	numberdown = 0	status = 0		for ifindex in sorted(interfacedata):		if interfacedata[ifindex][7] < interfacedata[ifindex][8]:			status = interfacedata[ifindex][8]		else:			status = interfacedata[ifindex][7]						if status == '1':			numberup = int(numberup + 1)		else:			numberdown = int(numberdown + 1)	percentfree = int((numberdown / (numberup + numberdown))*100)		if format == 'csv':		print 'up,down,percent'		print '{0},{1},{2},{3}'.format(hostname, numberup, numberdown, percentfree)	else:		print "Hostname: {0}".format(hostname)					print "Total Number up: {0}".format(numberup)		print "Total Number down: {0}".format(numberdown)		print "Percent Free: {0}".format(percentfree)if __name__ == "__main__":##### Start Main Section ######	hosts, ifcount, detail, format, outputfile = initArgs()		for i in hosts:		device = str(i)		community = str(hosts[i])				if format == 'Text':			print "Gathering SNMP Data for, %s using the community %s" % (device, community)				hostname = querysnmpdata.hostinfo(device, community)		interfacedata = populateifdata(device, community)		if ifcount == True:			printinterfacesumary(interfacedata, format, hostname)		if detail == True:			printinterfacestats(interfacedata, format, hostname)